;; Remove the startup screen and scratch message
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; Remove the menu bar
(if (fboundp 'scroll-bar-mode)                                                 
    (scroll-bar-mode -1)) 
(if (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
(if (fboundp 'set-fringe-mode)
    (set-fringe-mode 0))
(tool-bar-mode -1)
(icomplete-mode 1)

;; Set initial mode to text-mode
(setq initial-major-mode 'text-mode)

;; Enable MELPA for package management
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Install use-package if not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

;; Enable drag-stuff package
(use-package drag-stuff
  :ensure t
  :config
  (drag-stuff-global-mode 1)
  ;; Set keyboard shortcuts for drag-stuff
  (global-set-key (kbd "ESC <down>") 'drag-stuff-down)
  (global-set-key (kbd "M-<down>") 'drag-stuff-down)
  (global-set-key (kbd "ESC <up>") 'drag-stuff-up)
  (global-set-key (kbd "M-<up>") 'drag-stuff-up)
  (global-set-key (kbd "ESC <left>") 'drag-stuff-left)
  (global-set-key (kbd "M-<left>") 'drag-stuff-left) 
  (global-set-key (kbd "ESC <right>") 'drag-stuff-right)
  (global-set-key (kbd "M-<right>") 'drag-stuff-right))

; sublime text theme
(load-theme 'monokai t)
(set-face-attribute 'default nil
                    :family "Menlo" ;; Replace with your preferred font
                    :height 120) ;; Adjust size (in 1/10pt, so 120 = 12pt)

; disable arrow keys for movement
(global-unset-key (kbd "<left>"))
(global-unset-key (kbd "<right>"))
(global-unset-key (kbd "<up>"))
(global-unset-key (kbd "<down>"))
(global-unset-key (kbd "<C-left>"))
(global-unset-key (kbd "<C-right>"))
(global-unset-key (kbd "<C-up>"))
(global-unset-key (kbd "<C-down>"))
;(global-unset-key (kbd "<M-left>"))
;(global-unset-key (kbd "<M-right>"))
;(global-unset-key (kbd "<M-up>"))
;(global-unset-key (kbd "<M-down>"))

; move temporary emacs files to ~/.emacs-saves and ~/.emacs-lockfiles
(setq backup-directory-alist '(("." . "~/.emacs-saves")))                                
(setq auto-save-file-name-transforms '((".*" "~/.emacs-saves" t)))
(setq lock-file-name-transforms `((".*" "~/.emacs-lockfiles/" t)))

; detect filechanges outside of emacs and update buffer if change detected
(global-auto-revert-mode t)

(require 'obsidian)
(obsidian-specify-path "~/Proton Drive/Obsidian")
;; Clicking on a wiki link referring a non-existing file the file can be
;; created in the inbox (t) or next to the file with the link (nil).
;; Default: t - creating in the inbox
(setq obsidian-wiki-link-create-file-in-inbox nil)
;; You may want to define a folder for daily notes. By default it is the inbox.
(setq obsidian-daily-notes-directory "Zapiski")
;; Directory of note templates, unset (nil) by default
;(setq obsidian-templates-directory "Templates")
;; Daily Note template name - requires a template directory. Default: Daily Note Template.md
;(setq obsidian-daily-note-template "Daily Note Template.md")


;; Define obsidian-mode bindings
(add-hook
 'obsidian-mode-hook
 (lambda ()
   ;; Replace standard command with Obsidian.el's in obsidian vault:
   (local-set-key (kbd "C-c C-o") 'obsidian-follow-link-at-point)

   ;; Use either `obsidian-insert-wikilink' or `obsidian-insert-link':
   (local-set-key (kbd "C-c C-l") 'obsidian-insert-wikilink)

   ;; Following backlinks
   (local-set-key (kbd "C-c C-b") 'obsidian-backlink-jump)))

;; Optionally you can also bind a few functions:
;; replace "YOUR_BINDING" with the key of your choice:
;; (global-set-key (kbd "YOUR_BINDING") 'obsidian-jump)       ;; Opening a note
;; (global-set-key (kbd "YOUR_BINDING") 'obsidian-capture)    ;; Capturing a new note in the inbox
;; (global-set-key (kbd "YOUR_BINDING") 'obsidian-daily-note) ;; Creating daily note

;; Activate detection of Obsidian vault
(global-obsidian-mode t)

(use-package multiple-cursors
  :ensure t)

(global-set-key (kbd "C-d") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c C-d") 'mc/mark-all-like-this)

(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

;; Enable company mode for all buffers
(add-hook 'after-init-hook 'global-company-mode)

;; Custom-set variables and faces generated by Emacs
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("c7fd1708e08544d1df2cba59b85bd25263180b19b287489d4f17b9118487e718" default))
 '(package-selected-packages
   '(exec-path-from-shell multiple-cursors obsidian monokai-theme company drag-stuff)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
